---
description:
globs:
alwaysApply: true
---
# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Devlog

## 2024-06-XX - Refactor Kickoff

- Created `src/lib/stores/canvasStore.ts` with core view state (`zoom`, `offsetX`, `offsetY`), layout state (`boxes`), and methods (`panBy`, `zoomTo`, `addBox`, `updateBox`, `selectBox`, `setFullscreen`).
- Scaffolded `CanvasViewport.svelte` to subscribe to `canvasStore` and simplified `+page.svelte` to render only `<CanvasViewport />`.
- Defined sub-tasks for `BackgroundCanvas.svelte` extraction: moving `<canvas>` & `drawBackground` logic, hooking store subscriptions, implementing redraw throttling, and cleanup of original route code.

### Notes & Next Steps

- Ensure we wrap DOM APIs in `onMount` or `if (browser)` guards as we pull logic out of routes.
- Plan to use Svelte's `derived` store for `worldTransform` to keep templates lean.
- Next: build `BackgroundCanvas.svelte`, test redraw performance, then wire into `CanvasViewport`.

## 2024-06-XX - Nodes & Containers

- Scaffoled `NodesLayer.svelte`, subscribed to `canvasStore`, and rendered `<NodeContainer>` instances.
- Implemented SSR guard in `BackgroundCanvas.svelte` to defer store subscriptions until `onMount` and prevent `requestAnimationFrame` errors during SSR.

### Notes & Next Steps

- Next: flesh out `NodeContainer.svelte` with event handlers for selection and fullscreen toggles.
- Plan: extract panning and box interactions into Svelte actions for cleaner separation.

## 2024-06-XX - Interaction Actions

- Created `lib/interactions/panning.ts` action and hooked it up in `CanvasViewport.svelte` for viewport panning.
- Created `lib/interactions/zooming.ts` action and hooked it up in `CanvasViewport.svelte` for wheel zooming.
- Created `lib/interactions/boxDragging.ts` action and hooked it up in `NodeContainer.svelte` for box dragging.
- Implemented `lib/interactions/multiClick.ts` action and used it in `NodeContainer.svelte` for single vs double click handling.

### Notes & Next Steps

- All core interaction actions now in place. Ready to refine or add ControlsOverlay.

## 2024-06-XX - Interaction Refinements & Fullscreen Debugging

- Implemented fullscreen constraints in interaction actions (`panning.ts`, `zooming.ts`, `boxDragging.ts`) using `get(canvasStore)` to disable background interactions when a box is fullscreen.
- Added dedicated double-click handler to drag handle in `NodeContainer.svelte` to allow exiting fullscreen by double-clicking handle, while disabling exit on double-clicking content.
- Implemented background click deselection in `CanvasViewport.svelte` using `element.closest()` check.
- Added `lastSelectedBoxId` to `canvasStore.ts` and updated `NodeContainer.svelte` to use it for z-index, keeping the last selected box on top.
- Replaced `multiClick` action in `NodeContainer.svelte` with standard `on:click` and `on:dblclick` for instant selection feedback.
- Updated `boxDragging.ts` action to select the box on `mousedown`/`touchstart` for immediate visual feedback.
- Enabled 8-way resize handles in `NodeContainer.svelte` and implemented corresponding logic in `boxResizing.ts` (including basic touch support).
- Fixed abrupt fullscreen exit animation by reverting box animation to be purely CSS-driven (updating state immediately in `exitFullscreen` in `canvasStore.ts` and removing JS interpolation from `animateView` in `CanvasViewport.svelte`), closer to `LEGACY.md` approach.
- Resolved issue where interactions remained disabled after exiting fullscreen by ensuring `startAnimation` in `CanvasViewport.svelte` cancels existing frames and always requests a new one if needed.
- Added viewport state display (Zoom, X, Y) to `ControlsOverlay.svelte`.
- Fixed `ReferenceError: unsubZoom is not defined` in `boxDragging.ts` by correcting the `destroy` function cleanup.

### Notes & Next Steps

- Core interactions and fullscreen logic are now stable and feel responsive.
- Next steps could involve implementing the `Add Box` functionality, adding more node types, or refining the UI/styling.
